/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllWeeks(userId: string): Promise<Week[]> {
        let url_ = this.baseUrl + "/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllWeeks(_response);
        });
    }

    protected processGetAllWeeks(response: Response): Promise<Week[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Week.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week[]>(<any>null);
    }

    /**
     * @return Success
     */
    getWeekWithId(id: number): Promise<Week> {
        let url_ = this.baseUrl + "/api/Status/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeekWithId(_response);
        });
    }

    protected processGetWeekWithId(response: Response): Promise<Week> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Week.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week>(<any>null);
    }

    /**
     * @return Success
     */
    getWeekWithWeekNumber(userId: string, weekNumber: number, year: number): Promise<Week> {
        let url_ = this.baseUrl + "/{userId}/{weekNumber}/{year}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        if (weekNumber === undefined || weekNumber === null)
            throw new Error("The parameter 'weekNumber' must be defined.");
        url_ = url_.replace("{weekNumber}", encodeURIComponent("" + weekNumber)); 
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeekWithWeekNumber(_response);
        });
    }

    protected processGetWeekWithWeekNumber(response: Response): Promise<Week> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Week.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week>(<any>null);
    }

    /**
     * @return Success
     */
    getBookingsForWeek(weekid: number): Promise<Booking[]> {
        let url_ = this.baseUrl + "/api/Status/{weekid}/bookings";
        if (weekid === undefined || weekid === null)
            throw new Error("The parameter 'weekid' must be defined.");
        url_ = url_.replace("{weekid}", encodeURIComponent("" + weekid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingsForWeek(_response);
        });
    }

    protected processGetBookingsForWeek(response: Response): Promise<Booking[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Booking.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking[]>(<any>null);
    }

    /**
     * @return Success
     */
    getWorkedHoursForDays(weekid: number, milestone: string, day: Day): Promise<number> {
        let url_ = this.baseUrl + "/api/Status/{weekid}/{milestone}/hours/{day}";
        if (weekid === undefined || weekid === null)
            throw new Error("The parameter 'weekid' must be defined.");
        url_ = url_.replace("{weekid}", encodeURIComponent("" + weekid)); 
        if (milestone === undefined || milestone === null)
            throw new Error("The parameter 'milestone' must be defined.");
        url_ = url_.replace("{milestone}", encodeURIComponent("" + milestone)); 
        if (day === undefined || day === null)
            throw new Error("The parameter 'day' must be defined.");
        url_ = url_.replace("{day}", encodeURIComponent("" + day)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWorkedHoursForDays(_response);
        });
    }

    protected processGetWorkedHoursForDays(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @return Success
     */
    getBooking(weekid: number, bookingid: number): Promise<Booking> {
        let url_ = this.baseUrl + "/api/Status/{weekid}/{bookingid}";
        if (weekid === undefined || weekid === null)
            throw new Error("The parameter 'weekid' must be defined.");
        url_ = url_.replace("{weekid}", encodeURIComponent("" + weekid)); 
        if (bookingid === undefined || bookingid === null)
            throw new Error("The parameter 'bookingid' must be defined.");
        url_ = url_.replace("{bookingid}", encodeURIComponent("" + bookingid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBooking(_response);
        });
    }

    protected processGetBooking(response: Response): Promise<Booking> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Booking.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking>(<any>null);
    }

    /**
     * @return Success
     */
    addBookingToWeekById(weekid: number, bookingid: number): Promise<Week> {
        let url_ = this.baseUrl + "/api/Status/{weekid}/{bookingid}";
        if (weekid === undefined || weekid === null)
            throw new Error("The parameter 'weekid' must be defined.");
        url_ = url_.replace("{weekid}", encodeURIComponent("" + weekid)); 
        if (bookingid === undefined || bookingid === null)
            throw new Error("The parameter 'bookingid' must be defined.");
        url_ = url_.replace("{bookingid}", encodeURIComponent("" + bookingid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddBookingToWeekById(_response);
        });
    }

    protected processAddBookingToWeekById(response: Response): Promise<Week> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Week.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week>(<any>null);
    }

    /**
     * @param book (optional) 
     * @return Success
     */
    addBookingToWeekByContract(weekid: number, book: AddBooking | null | undefined): Promise<Week> {
        let url_ = this.baseUrl + "/api/Status/{weekid}";
        if (weekid === undefined || weekid === null)
            throw new Error("The parameter 'weekid' must be defined.");
        url_ = url_.replace("{weekid}", encodeURIComponent("" + weekid)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(book);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddBookingToWeekByContract(_response);
        });
    }

    protected processAddBookingToWeekByContract(response: Response): Promise<Week> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Week.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week>(<any>null);
    }

    /**
     * @param book (optional) 
     * @return Success
     */
    addBookingFromSuggestionToWeek(weekId: number, book: AddBooking | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/fromsuggestion/{weekId}";
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(book);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddBookingFromSuggestionToWeek(_response);
        });
    }

    protected processAddBookingFromSuggestionToWeek(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateWeekWithComplete(id: number, complete: boolean): Promise<void> {
        let url_ = this.baseUrl + "/api/Status/{id}/complete/{complete}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (complete === undefined || complete === null)
            throw new Error("The parameter 'complete' must be defined.");
        url_ = url_.replace("{complete}", encodeURIComponent("" + complete)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateWeekWithComplete(_response);
        });
    }

    protected processUpdateWeekWithComplete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllSuggestions(userId: string): Promise<Suggestion[]> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllSuggestions(_response);
        });
    }

    protected processGetAllSuggestions(response: Response): Promise<Suggestion[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Suggestion.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Suggestion[]>(<any>null);
    }

    /**
     * @param suggestion (optional) 
     * @return Success
     */
    addSuggestion(suggestion: Suggestion | null | undefined, userId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(suggestion);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddSuggestion(_response);
        });
    }

    protected processAddSuggestion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getSuggestion(id: number, userId: string): Promise<Suggestion> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSuggestion(_response);
        });
    }

    protected processGetSuggestion(response: Response): Promise<Suggestion> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Suggestion.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Suggestion>(<any>null);
    }

    /**
     * @param suggestion (optional) 
     * @return Success
     */
    updateSuggestion(id: number, suggestion: Suggestion | null | undefined, userId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(suggestion);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSuggestion(_response);
        });
    }

    protected processUpdateSuggestion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteSuggestion(id: number, userId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSuggestion(_response);
        });
    }

    protected processDeleteSuggestion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param contract (optional) 
     * @return Success
     */
    addSuggestionByContract(userId: string, contract: AddSuggestion | null | undefined): Promise<Week> {
        let url_ = this.baseUrl + "/api/users/{userId}/Suggestions/addByContract";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contract);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddSuggestionByContract(_response);
        });
    }

    protected processAddSuggestionByContract(response: Response): Promise<Week> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Week.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Week>(<any>null);
    }

    /**
     * @return Success
     */
    getAllUsers(): Promise<User[]> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(<any>null);
    }

    /**
     * @param user (optional) 
     * @return Success
     */
    addUser(user: User | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddUser(_response);
        });
    }

    protected processAddUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getUser(id: string): Promise<User> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * @param user (optional) 
     * @return Success
     */
    updateUser(id: string, user: User | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserWithHoursToWorkInAWeek(id: string, hoursToWork: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Users/{id}/{hoursToWork}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (hoursToWork === undefined || hoursToWork === null)
            throw new Error("The parameter 'hoursToWork' must be defined.");
        url_ = url_.replace("{hoursToWork}", encodeURIComponent("" + hoursToWork)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUserWithHoursToWorkInAWeek(_response);
        });
    }

    protected processUpdateUserWithHoursToWorkInAWeek(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class Week implements IWeek {
    id?: number | undefined;
    weekNumber?: number | undefined;
    year?: number | undefined;
    completeDays?: boolean[] | undefined;
    bookings?: Booking[] | undefined;
    hoursWorked?: number | undefined;
    userId?: string | undefined;
    week_complete?: boolean | undefined;

    constructor(data?: IWeek) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.weekNumber = data["weekNumber"];
            this.year = data["year"];
            if (Array.isArray(data["completeDays"])) {
                this.completeDays = [] as any;
                for (let item of data["completeDays"])
                    this.completeDays!.push(item);
            }
            if (Array.isArray(data["bookings"])) {
                this.bookings = [] as any;
                for (let item of data["bookings"])
                    this.bookings!.push(Booking.fromJS(item));
            }
            this.hoursWorked = data["hoursWorked"];
            this.userId = data["userId"];
            this.week_complete = data["week_complete"];
        }
    }

    static fromJS(data: any): Week {
        data = typeof data === 'object' ? data : {};
        let result = new Week();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["weekNumber"] = this.weekNumber;
        data["year"] = this.year;
        if (Array.isArray(this.completeDays)) {
            data["completeDays"] = [];
            for (let item of this.completeDays)
                data["completeDays"].push(item);
        }
        if (Array.isArray(this.bookings)) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        data["hoursWorked"] = this.hoursWorked;
        data["userId"] = this.userId;
        data["week_complete"] = this.week_complete;
        return data; 
    }
}

export interface IWeek {
    id?: number | undefined;
    weekNumber?: number | undefined;
    year?: number | undefined;
    completeDays?: boolean[] | undefined;
    bookings?: Booking[] | undefined;
    hoursWorked?: number | undefined;
    userId?: string | undefined;
    week_complete?: boolean | undefined;
}

export class Booking implements IBooking {
    weekId?: number | undefined;
    dayOfWeek?: BookingDayOfWeek | undefined;
    kind?: BookingKind | undefined;
    numberOfHours?: number | undefined;
    id?: number | undefined;
    milestone?: string | undefined;
    type?: BookingType | undefined;
    description?: string | undefined;

    constructor(data?: IBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.weekId = data["weekId"];
            this.dayOfWeek = data["dayOfWeek"];
            this.kind = data["kind"];
            this.numberOfHours = data["numberOfHours"];
            this.id = data["id"];
            this.milestone = data["milestone"];
            this.type = data["type"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weekId"] = this.weekId;
        data["dayOfWeek"] = this.dayOfWeek;
        data["kind"] = this.kind;
        data["numberOfHours"] = this.numberOfHours;
        data["id"] = this.id;
        data["milestone"] = this.milestone;
        data["type"] = this.type;
        data["description"] = this.description;
        return data; 
    }
}

export interface IBooking {
    weekId?: number | undefined;
    dayOfWeek?: BookingDayOfWeek | undefined;
    kind?: BookingKind | undefined;
    numberOfHours?: number | undefined;
    id?: number | undefined;
    milestone?: string | undefined;
    type?: BookingType | undefined;
    description?: string | undefined;
}

export class AddBooking implements IAddBooking {
    weekId?: number | undefined;
    day?: AddBookingDay | undefined;
    type?: AddBookingType | undefined;
    kind?: AddBookingKind | undefined;
    nrOfHours?: number | undefined;
    description?: string | undefined;
    milestone?: string | undefined;

    constructor(data?: IAddBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.weekId = data["weekId"];
            this.day = data["day"];
            this.type = data["type"];
            this.kind = data["kind"];
            this.nrOfHours = data["nrOfHours"];
            this.description = data["description"];
            this.milestone = data["milestone"];
        }
    }

    static fromJS(data: any): AddBooking {
        data = typeof data === 'object' ? data : {};
        let result = new AddBooking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weekId"] = this.weekId;
        data["day"] = this.day;
        data["type"] = this.type;
        data["kind"] = this.kind;
        data["nrOfHours"] = this.nrOfHours;
        data["description"] = this.description;
        data["milestone"] = this.milestone;
        return data; 
    }
}

export interface IAddBooking {
    weekId?: number | undefined;
    day?: AddBookingDay | undefined;
    type?: AddBookingType | undefined;
    kind?: AddBookingKind | undefined;
    nrOfHours?: number | undefined;
    description?: string | undefined;
    milestone?: string | undefined;
}

export class Suggestion implements ISuggestion {
    numberOfHours?: number | undefined;
    name?: string | undefined;
    userId?: string | undefined;
    kind?: SuggestionKind | undefined;
    id?: number | undefined;
    milestone?: string | undefined;
    type?: SuggestionType | undefined;
    description?: string | undefined;

    constructor(data?: ISuggestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.numberOfHours = data["numberOfHours"];
            this.name = data["name"];
            this.userId = data["userId"];
            this.kind = data["kind"];
            this.id = data["id"];
            this.milestone = data["milestone"];
            this.type = data["type"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): Suggestion {
        data = typeof data === 'object' ? data : {};
        let result = new Suggestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfHours"] = this.numberOfHours;
        data["name"] = this.name;
        data["userId"] = this.userId;
        data["kind"] = this.kind;
        data["id"] = this.id;
        data["milestone"] = this.milestone;
        data["type"] = this.type;
        data["description"] = this.description;
        return data; 
    }
}

export interface ISuggestion {
    numberOfHours?: number | undefined;
    name?: string | undefined;
    userId?: string | undefined;
    kind?: SuggestionKind | undefined;
    id?: number | undefined;
    milestone?: string | undefined;
    type?: SuggestionType | undefined;
    description?: string | undefined;
}

export class AddSuggestion implements IAddSuggestion {
    name?: string | undefined;
    milestone?: string | undefined;
    numberOfHours?: number | undefined;
    kind?: AddSuggestionKind | undefined;
    type?: AddSuggestionType | undefined;
    description?: string | undefined;

    constructor(data?: IAddSuggestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.milestone = data["milestone"];
            this.numberOfHours = data["numberOfHours"];
            this.kind = data["kind"];
            this.type = data["type"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): AddSuggestion {
        data = typeof data === 'object' ? data : {};
        let result = new AddSuggestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["milestone"] = this.milestone;
        data["numberOfHours"] = this.numberOfHours;
        data["kind"] = this.kind;
        data["type"] = this.type;
        data["description"] = this.description;
        return data; 
    }
}

export interface IAddSuggestion {
    name?: string | undefined;
    milestone?: string | undefined;
    numberOfHours?: number | undefined;
    kind?: AddSuggestionKind | undefined;
    type?: AddSuggestionType | undefined;
    description?: string | undefined;
}

export class User implements IUser {
    id?: string | undefined;
    name?: string | undefined;
    hoursToWorkInAWeek?: number | undefined;
    suggestions?: Suggestion[] | undefined;
    weeks?: Week[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.hoursToWorkInAWeek = data["hoursToWorkInAWeek"];
            if (Array.isArray(data["suggestions"])) {
                this.suggestions = [] as any;
                for (let item of data["suggestions"])
                    this.suggestions!.push(Suggestion.fromJS(item));
            }
            if (Array.isArray(data["weeks"])) {
                this.weeks = [] as any;
                for (let item of data["weeks"])
                    this.weeks!.push(Week.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["hoursToWorkInAWeek"] = this.hoursToWorkInAWeek;
        if (Array.isArray(this.suggestions)) {
            data["suggestions"] = [];
            for (let item of this.suggestions)
                data["suggestions"].push(item.toJSON());
        }
        if (Array.isArray(this.weeks)) {
            data["weeks"] = [];
            for (let item of this.weeks)
                data["weeks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUser {
    id?: string | undefined;
    name?: string | undefined;
    hoursToWorkInAWeek?: number | undefined;
    suggestions?: Suggestion[] | undefined;
    weeks?: Week[] | undefined;
}

export enum Day {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum BookingDayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum BookingKind {
    _0 = 0,
    _1 = 1,
}

export enum BookingType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum AddBookingDay {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum AddBookingType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum AddBookingKind {
    _0 = 0,
    _1 = 1,
}

export enum SuggestionKind {
    _0 = 0,
    _1 = 1,
}

export enum SuggestionType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum AddSuggestionKind {
    _0 = 0,
    _1 = 1,
}

export enum AddSuggestionType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}